[project]
name = "path-to-csv"
version = "0.1.0"
description = "Script to crawl a path and write a CSV file with information about all files in that path."
authors = [
    {name = "JanEricNitschke", email = "janericnitschke@gmail.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
dependencies = [
    "epub-meta>=0.0.7",
    "gooey>=1.0.8.1",
    "pywin32>=311"

]

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "pylint>=3.3.8",
    "pyright>=1.1.405",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]
only-include = ["path_to_csv.py"]



[tool.pymend]
extend-exclude = "docs/|tests/"
output-style   = "google"
input-style    = "google"
check          = true

[tool.ruff]
# Same as Black.
line-length = 88
# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["ALL"]
ignore = ["COM", "PTH", "ANN101", "ANN401"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py"     = ["E402", "F401"]
"tests/test_*.py" = ["ANN201", "S101", "SLF001", "PLR2004"]

[tool.ruff.lint.pydocstyle]
convention = "google" # Accepts: "google", "numpy", or "pep257".

[tool.pyright]
include                            = ["path_to_csv.py"]
exclude                            = ["tests"]
strictListInference                = true
strictDictionaryInference          = true
reportPropertyTypeMismatch         = "error"
reportFunctionMemberAccess         = "error"
reportMissingTypeStubs             = "error"
reportUntypedFunctionDecorator     = "error"
reportUntypedClassDecorator        = "error"
reportUntypedBaseClass             = "error"
reportUntypedNamedTuple            = "error"
reportPrivateUsage                 = "error"
reportConstantRedefinition         = "error"
reportOverlappingOverload          = "error"
reportMissingParameterType         = "error"
reportUnnecessaryIsInstance        = "error"
reportUnnecessaryCast              = "error"
reportUnnecessaryComparison        = "error"
reportUnnecessaryContains          = "error"
reportAssertAlwaysTrue             = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportImplicitOverride             = "error"
reportShadowedImports              = "error"

[tool.pylint.basic]
# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "ex", "Run", "_", "x", "y", "z", "e"]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 200 # Handled by formatter + ruff

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["."]
omit = ["tests/*"]
